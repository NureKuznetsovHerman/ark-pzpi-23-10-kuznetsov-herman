МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ


ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ 
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмна інженерія»






ДОПОВІДЬ


для дисципліни «Аналіз та рефакторинг коду»

на тему «Правила оформлення програмного коду Crystal»





Виконав:                                                                                   Прийняв:

ст. гр. ПЗПІ-23-10                                                                    ст. викл Сокорчук І.П

Кузнецов Г.О.










Харків 2025

     
     Мета роботи
     Метою роботи є ознайомлення з основними принципами та правилами 
оформлення програмного коду мовою Crystal, розуміння важливості єдиного 
стилю в процесі розробки програмного забезпечення, а також засвоєння 
практичних підходів до підвищення якості, структурованості та читабельності 
програмного тексту. Крім того, розглядаються питання іменування, 
документування, форматування, коментування та використання інструментів 
для автоматичної перевірки стилю і тестування програм.
Хід роботи
     Crystal — це сучасна мова програмування, яка поєднує простоту та 
зручність синтаксису Ruby з високою швидкістю і строгістю типізації. Вона 
створена для того, щоб забезпечити ефективність і при цьому залишатися 
зрозумілою для розробників. Саме тому важливим елементом роботи з нею є 
дотримання стандартів оформлення коду. Від якості оформлення залежить не 
лише зовнішній вигляд програми, а й її підтримуваність, зрозумілість, 
безпечність і стабільність у майбутньому.
     Під час написання коду важливо дотримуватись єдиного стилю, 
оскільки код — це форма комунікації між розробниками. Якщо його 
оформлено без системи, з різними відступами, назвами чи структурою, він 
стає хаотичним і важким для розуміння. Навпаки, єдиний стиль забезпечує 
передбачуваність, що особливо важливо при командній роботі. Crystal має 
власний офіційний стильовий посібник — Crystal Style Guide, який 
встановлює правила щодо відступів, розташування елементів, іменування 
класів, методів та змінних.
     Організація проєкту
Файли поділяють за функціональністю:
models — моделі даних
controllers — керування потоками інформації
views — відображення інтерфейсу
lib або utils — допоміжні бібліотеки
     
     Доброю практикою вважається, коли кожен файл відповідає лише за 
один основний клас або модуль. Це підвищує зручність навігації та зменшує 
ймовірність помилок.
     Форматування
     У Crystal стандартом є використання двох пробілів для відступів замість 
табуляцій. Рекомендована довжина рядка — до 100 символів, між функціями 
— один порожній рядок, оператори відокремлюються пробілами. Crystal 
використовує відступи замість фігурних дужок, тому акуратність має 
вирішальне значення.
     Приклад правильної функції: [Додаток В.1]
     Іменування
Змінні та методи — snake_case (наприклад, total_sum, calculate_average)
Класи та модулі — CamelCase (наприклад, UserManager, OrderService)
     Приклад: [Додаток В.2]
     Коментування та документація
Коментарі пояснюють логіку, а не дублюють очевидне. Crystal підтримує 
стиль документування, схожий на YARD або Javadoc.
     Приклад[Додаток В.3]
     Документування функції: [Додаток В.4]
     Перевірка та аналіз коду
Форматування: crystal tool format
Статичний аналіз: Ameba
Тестування: spec, підхід TDD
     Поганий приклад:[Додаток В.5]
     Хороший приклад:[Додаток В.6]
     Додаткові приклади функцій та безпечного коду:
     [Додаток В.7], [Додаток В.8], [Додаток В.9], [Додаток В.10]
Ці приклади демонструють важливість: зрозумілих імен функцій та змінних; 
обробки помилок і перевірки даних; чистої структури та форматування коду, 
що відповідає стандартам Crystal; легкості тестування та підтримки за 
допомогою TDD та spec. 
     Висновки
У результаті роботи було досліджено принципи оформлення програмного коду 
мовою Crystal і визначено їхню ключову роль у процесі розробки. Гарний стиль 
— це не лише естетика, а й запорука стабільності та ефективності програмного 
продукту. Структурованість, логічність, чітке форматування, послідовне 
іменування, короткі й змістовні коментарі суттєво спрощують розуміння 
програми, зменшують ризик помилок і підвищують продуктивність роботи 
розробників.
Використання інструментів Ameba, crystal tool format і тестів spec забезпечує 
автоматизований контроль якості, а застосування підходів TDD та CI/CD робить 
розробку більш надійною. Дотримання правил оформлення коду є основою 
професійної культури програміста і сприяє створенню чистого, підтримуваного 
та зрозумілого коду. Crystal надає всі умови для цього завдяки простоті, 
типобезпечності та сучасним засобам аналізу. 
Перелік використаних джерел
1.	Офіційна документація мови Crystal: https://crystal-lang.org
2.	Crystal Style Guide: https://crystal-
lang.org/docs/conventions/coding_style.html
3.	Вікі Crystal Language на GitHub: https://github.com/crystal-lang/crystal
 
Додаток А
     Посилання на відеоролик на YouTube: https://youtu.be/KRP4XVNbpno
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
      
Додаток Б
Перелік слайдів презентації
  
Рисунок Б.1 – Титульна сторінка.

  
Рисунок Б.2 – Вступ.
 
Рисунок Б.3 – Форматування коду.

 
Рисунок Б.4 – Іменування.
 
Рисунок Б.5 – Основні правила оформлення.

 
Рисунок Б.6 – Коментарі та їх призначення.
 
Рисунок Б.7 – Коментарі та їх практикування.

 
Рисунок Б.8 – Обробка помилок.
 
Рисунок Б.9 – Порівння Junior та Senior Code.
 
Рисунок Б.10 – Хороші та погані приклади оформлення.
 
Рисунок Б.11 – Інструменти та автоматизація.

 
Рисунок Б.12 – Висновок.
 
Рисунок Б.13 – Перелік використаних джерел.
 

Додаток В
В.1 – форматування правильної функції 
GitHub репозиторій: https://github.com/NureKuznetsovHerman/ark-pzpi-23-10-
kuznetsov-herman/blob/main/Pract1/ark-pzpi-23-10-kuznetsov-herman-
pract1/code_example.txt
if age >= 18
  puts "Adult"
else
  puts "Minor"
end

В.2 – приклад іменування 
GitHub репозиторій: https://github.com/NureKuznetsovHerman/ark-pzpi-23-10-
kuznetsov-herman/blob/main/Pract1/ark-pzpi-23-10-kuznetsov-herman-
pract1/code_example.txt
user_name = "Bob"

def calculate_total(price, tax)
  price + tax
end

class OrderManager
end

В.3 – приклад коментування 
GitHub репозиторій: https://github.com/NureKuznetsovHerman/ark-pzpi-23-10-
kuznetsov-herman/blob/main/Pract1/ark-pzpi-23-10-kuznetsov-herman-
pract1/code_example.txtclass HelloWorld
  def greet
    puts "Hello, World!"
  end
end

В.4 – приклад документування функції 
GitHub репозиторій: https://github.com/NureKuznetsovHerman/ark-pzpi-23-10-
kuznetsov-herman/blob/main/Pract1/ark-pzpi-23-10-kuznetsov-herman-
pract1/code_example.txt
# Обчислює факторіал числа
def factorial(n)
  return 1 if n <= 1
  n * factorial(n - 1)
end

В.5 – поганий приклад аналізу коду 
GitHub репозиторій: https://github.com/NureKuznetsovHerman/ark-pzpi-23-10-
kuznetsov-herman/blob/main/Pract1/ark-pzpi-23-10-kuznetsov-herman-
pract1/code_example.txt
# Обчислює середнє значення масиву
def average(arr : Array(Int32)) : Float64
  arr.sum.to_f / arr.size
end

В.6 – хороший приклад аналізу коду 
GitHub репозиторій: https://github.com/NureKuznetsovHerman/ark-pzpi-23-10-
kuznetsov-herman/blob/main/Pract1/ark-pzpi-23-10-kuznetsov-herman-
pract1/code_example.txt
begin
  result = 100 / gets.to_i
  puts result
rescue DivisionByZeroError
  puts "Ділення на нуль!"
end

В.7 – приклад Junior коду 
GitHub репозиторій: https://github.com/NureKuznetsovHerman/ark-pzpi-23-10-
kuznetsov-herman/blob/main/Pract1/ark-pzpi-23-10-kuznetsov-herman-
pract1/code_example.txtdef calc(a, b)
  if b != 0
    return a / b
  else
    return 0
  end
end

В.8 – приклад Senior коду 
GitHub репозиторій: https://github.com/NureKuznetsovHerman/ark-pzpi-23-10-
kuznetsov-herman/blob/main/Pract1/ark-pzpi-23-10-kuznetsov-herman-
pract1/code_example.txt
# Обчислює ділення з перевіркою
def safe_division(a : Int32, b : Int32) : Float64
  raise ArgumentError.new("b не може бути 0") if b == 0
  a.to_f / b
end

В.9 – поганий приклад оформлення 
GitHub репозиторій: https://github.com/NureKuznetsovHerman/ark-pzpi-23-10-
kuznetsov-herman/blob/main/Pract1/ark-pzpi-23-10-kuznetsov-herman-
pract1/code_example.txt
def x(a,b)puts a+b;end

В.10 – хороший приклад оформлення 
GitHub репозиторій: https://github.com/NureKuznetsovHerman/ark-pzpi-23-10-
kuznetsov-herman/blob/main/Pract1/ark-pzpi-23-10-kuznetsov-herman-
pract1/code_example.txt
# Обчислює суму
def add(a : Int32, b : Int32) : Int32
  a + b
end

